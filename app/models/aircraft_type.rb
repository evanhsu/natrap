class AircraftType < ActiveRecord::Base
  has_attached_file :image,
                    :path => ":rails_root/public/images/schematics/:basename.:extension",
                    :url => "schematics/:basename.:extension"

  validates :shortname, :presence => true

  def configurations_for_javascript_select(selected = nil)
    #creates a string of option tags from aircraft configurations.  The option tags include
    #the same data as that generated by self.shortnames_for_javascript_select.
    return unless configs = self.configurations
    option_tags = ""
    configs.each do |config|
      is_selected = (selected and config.downcase == selected.downcase) ? "selected='true'" : ""
      partial_options = "data-insertion='update' data-partial='#{self.shortname.downcase.gsub(" ", "_")}_#{config.downcase}' data-container='rappeller_configuration'"
      option_tags += "<option value='#{config}' class='add_content' #{is_selected} #{partial_options}>#{config}</option>"
    end
    return option_tags
  end

  def self.shortnames_for_javascript_select(selected = nil)
    #creates a string of option tags from aircraft names.  The option tags also include
    #data used by operation_form.js to determine how the selection should dynamically
    #affect the page.
    types = AircraftType.group("lower(shortname)")
    option_tags = ""
    types.each do |type|
      name = type.shortname
      is_selected = (selected and (name.downcase == selected.shortname.downcase)) ? "selected='true'" : ""
      configurations = type.configurations ? "data-configurations='#{type.configurations.join(",")}'" : ""
      if type.configurations
        partial_options = "data-insertion='update' data-partial='#{name.downcase.gsub(" ", "_")}_#{type.configurations.first}' data-container='rappeller_configuration'"
      else
        partial_options = "data-insertion='update' data-partial='#{name.downcase.gsub(" ", "_")}' data-container='rappeller_configuration'"
      end
      option_tags += "<option value='#{name}' class='add_content' #{configurations} #{is_selected} #{partial_options}>#{name}</option>"
    end
    return option_tags
  end

  def configurations
    configs = AircraftType.all(:conditions => ["shortname LIKE ?", self.shortname]).collect { |t| t.configuration }
    return configs unless (configs.count == 1 and configs.first.nil?)
  end

  def name_and_config
    return (self.shortname.downcase + " " + self.configuration.to_s.downcase).strip
  end
end
